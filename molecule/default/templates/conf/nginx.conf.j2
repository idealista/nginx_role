{{ ansible_managed | comment }}
worker_processes {{ nginx_workers }};
error_log  {{ nginx_error_log }};
{% if nginx_worker_rlimit_nofile is defined %}
worker_rlimit_nofile {{ nginx_worker_rlimit_nofile }};
{% endif %}

events {
    worker_connections {{ nginx_connections }};
    use epoll;
    multi_accept on;
}

http {
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    server_names_hash_bucket_size {{ nginx_server_names_hash_bucket_size }};
    server_tokens {{ nginx_server_tokens|default('off') }};

    client_max_body_size {{ nginx_client_max_body_size }};

    include mime.types;

    default_type  application/octet-stream;
    sendfile  on;
    keepalive_timeout {{ nginx_keepalive_timeout }};
    keepalive_requests {{ nginx_keepalive_requests }};
    reset_timedout_connection on;
    proxy_buffering {{ nginx_proxy_buffering }};
    proxy_buffer_size {{nginx_proxy_buffer_size }};
    proxy_buffers {{ nginx_proxy_buffers }};
    proxy_busy_buffers_size {{ nginx_proxy_busy_buffers_size }};

    gzip on;
    gzip_comp_level 2;
    gzip_min_length 1k;

    tcp_nodelay on;
    tcp_nopush on;

    log_format  main '$remote_addr - [$time_local] ($request_time) $status '
        '"$request" $request_length $body_bytes_sent '
        '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  {{ nginx_access_log }}  main;

    include {{ nginx_conf_path }}/sites-enabled/*;

    include {{ nginx_conf_path }}/extra-conf/*;

    stream {

        lua_shared_dict prometheus_metrics_stream 10M;
        {%- set lua_package_list = [] -%}
        {%- for plugin in nginx_lua_external_dependencies -%}
            {{ lua_package_list.append(nginx_conf_path + '/plugins/' + plugin.name + '-' + plugin.version + '/lib/?.lua') }}
        {%- endfor -%}
        {{ lua_package_list.append(nginx_conf_path + '/plugins/?.lua;;') }}
        lua_package_path "{{ lua_package_list | join(';') }}"

        init_by_lua_block {
            prometheus = require("prometheus").init("prometheus_metrics_stream")
            metric_requests = prometheus:counter("nginx_http_requests_total", "Number of HTTP requests", {"test"})
            metric_connections = prometheus:gauge("nginx_http_connections", "Number of HTTP connections", {"test"})
        }
        log_by_lua_block {
            metric_requests:inc(1, {"test"})
            metric_connections:set(1, {"test"})
        }

        server {
            listen      8000;

            content_by_lua_block {
                local sock = assert(ngx.req.socket(true))
                local data = sock:receive()
                local location = "GET /metrics"
                if string.sub(data, 1, string.len(location)) == location then
                    ngx.say("HTTP/1.1 200 OK")
                    ngx.say("Content-Type: text/plain")
                    ngx.say("")
                    ngx.say(table.concat(prometheus:metric_data(), ""))
                else
                    ngx.say("HTTP/1.1 404 Not Found")
                end
            }
        }
}
}
